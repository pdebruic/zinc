#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#otions
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D] --  -l -I <path-to-.topazini-file>

DESCRIPTION
  Script that reads the DataFrame packages from disk using Rowan ... format validation.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h -- rowan_361
  $basename -h -- -l -I .topazini

  $basename -D -- rowan_361
  $basename -D -- -l -I .topazini

  $basename -- rowan_361
  $basename -- -l -I .topazini
-----
%
doit
	| resolvedProject |
	resolvedProject := Rowan 
		projectFromUrl: 'file:$ROWAN_PROJECTS_HOME/DataFrame/gs/rowan/specs/DataFrame.ston'
			projectsHome: '$ROWAN_PROJECTS_HOME'
			componentNames: #('Core') 
			customConditionalAttributes: #( 'tests' 'pharo' ).
	resolvedProject packages keysAndValuesDo: [:packageName :packageDefinition |
		self stdout 
			nextPutAll: '-----PACKAGE-----'; lf; 
			nextPutAll: packageName; lf;
			nextPutAll: '-----'; lf; 
			yourself.
		packageDefinition
			classDefinitions keysAndValuesDo: [:className :classDefinition |
				self stdout
					tab; nextPutAll: '-----CLASS-----'; lf; 
					tab; nextPutAll: className; lf;
					tab; nextPutAll: '-----instance-side---'; lf; 
					yourself.
				classDefinition instanceMethodDefinitions keys do: [:selector |
					self stdout
						tab; tab; nextPutAll: selector asString; lf ].
				self stdout
					tab; nextPutAll: '-----class-side---'; lf; 
					yourself.
				classDefinition classMethodDefinitions keys do: [:selector |
					self stdout
						tab; tab; nextPutAll: selector asString; lf ] ].
		packageDefinition
			classExtensions keysAndValuesDo: [:className :classDefinition |
				self stdout
					tab; nextPutAll: '-----CLASS EXTENSION-----'; lf; 
					tab; nextPutAll: className; lf;
					tab; nextPutAll: '-----instance-side---'; lf; 
					yourself.
				classDefinition instanceMethodDefinitions keys do: [:selector |
					self stdout
						tab; tab; nextPutAll: selector asString; lf ].
				self stdout
					tab; nextPutAll: '-----class-side---'; lf; 
					yourself.
				classDefinition classMethodDefinitions keys do: [:selector |
					self stdout
						tab; tab; nextPutAll: selector asString; lf ] ].
	 ].
	^ self noResult
%
