#!/usr/bin/env superdoit_stone
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D] --  -l -I <path-to-.topazini-file>

DESCRIPTION
  Script to create the Rowan project metadata for the Zinc project ... include pharo-specific
  packages in the Rowan project, so that repackaging can be done programmatically.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h -- rowan_361
  $basename -h -- -l -I .topazini

  $basename -D -- rowan_361
  $basename -D -- -l -I .topazini

  $basename -- rowan_361
  $basename -- -l -I .topazini
-----
%
method
definedProjectForCommon: projectName
	^ (Rowan newProjectNamed: projectName)
		gemstoneSetDefaultSymbolDictNameTo: 'Globals';
		repoType: #git;	
		projectAlias: 'zinc_rowan';
		customConditionalAttributes: #('tests' );
		packageFormat: 'tonel';
		packageConvention: 'Monticello';
		projectSpecPath: 'gs/rowan';	
		projectsPath: 'gs/rowan/projects';
		specsPath: 'gs/rowan/specs';
		projectsPath: 'gs/rowan/projects';
		projectSpecFile: 'gs/rowan/project.ston';
		packagesPath: 'repository';
		componentsPath: 'gs/rowan/components';
		yourself.
%
method
definedProjectForFiletree: projectName
	^ (self definedProjectForCommon: projectName)
		packageFormat: 'filetree';
		yourself.
%
doit
	| projectName projectAlias componentName commonPackageNames definedProject testPackageNames
		testsComponent resolvedProject projectDefinition |

	projectName := 'zinc'.
	projectAlias := 'zinc_rowan'.
	componentName := 'Core'.
	commonPackageNames := 	{
			'Zinc-HTTP'.
			'Zinc-Resource-Meta-Core' .
			'Zinc-WebDAV' .
		}.
	testPackageNames := { 
			'Zinc-Tests' .
			'Zinc-Resource-Meta-Tests' .
			'Zinc-Zodiac-Tests' .
		}.

	('$ROWAN_PROJECTS_HOME' asFileReference / projectAlias / 'gs' / 'rowan') ensureDeleteAll.

	definedProject := self definedProjectForFiletree: projectName.
	definedProject addTopLevelComponentNamed: componentName.
	commonPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: componentName ].

	testsComponent := definedProject
		addSimpleNestedComponentNamed: 'tests/tests' 
		condition: 'tests' 
		comment: ''.
	testPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: testsComponent name ].
	definedProject 
		addComponentNamed: testsComponent name 
		toComponentNamed: componentName.

	
	resolvedProject := definedProject resolve _resolvedProject.
	Rowan projectTools createV2
		createResolvedProjectRepository: resolvedProject repository.
	resolvedProject 
		exportProjectSpecification;
		exportProjects;
		exportComponents;
		yourself.
	resolvedProject read.
	projectDefinition := resolvedProject _projectDefinition copy.

	"convert to tonel packages and write"
	definedProject
		packageFormat: 'tonel';
		packagesPath: 'gs/rowan/src';
		yourself.

	resolvedProject := definedProject resolve.
	resolvedProject _resolvedProject _projectDefinition: projectDefinition.
	resolvedProject write.

	^ self noResult
%
